#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021 - 2025 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: Unlicense

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_path")"

proj_root_dir="$(cd "$script_dir"/..; pwd)"
build_dir="$proj_root_dir/build"
data_dir="${DATA_DIR:-$build_dir/data}"
db_base_dir="${DB_BASE_DIR:-$build_dir/rdf_db}"
# This is where our RDF data will be stored (in a query-efficient way)
db_dir="$db_base_dir/active"
db_tmp_dir="$db_base_dir/tmp"
db_bak_dir="$db_base_dir/backup"
res_dir="${RES_DIR:-$proj_root_dir/res}"

# See: https://stackoverflow.com/a/7335120/586229
JAVA_VER=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F '.' '{sub("^$", "0", $2); print $1$2}')
# Apache Jena 5.3.0, March 2025, requires at least Java 17
JAVA_VER_MIN=117

JENA_VERSION="5.3.0"
JENA_DL_BASE_URL="https://archive.apache.org/dist/jena/binaries/"
JENA_DL_URL="$JENA_DL_BASE_URL/apache-jena-$JENA_VERSION.zip"
JENA_FUSEKI_DL_URL="$JENA_DL_BASE_URL/apache-jena-fuseki-$JENA_VERSION.zip"

# For the DB
JENA_HOME="$HOME/.local/opt/apache-jena-$JENA_VERSION"
# For the (SPARQL) query web interface to the DB
JENA_FUSEKI_HOME="$HOME/.local/opt/apache-jena-fuseki-$JENA_VERSION"

jena_db_data_injector="$JENA_HOME/bin/tdb2.tdbloader"
jena_db_data_querier="$JENA_HOME/bin/tdb2.tdbquery"
jena_fuseki_server="$JENA_FUSEKI_HOME/fuseki-server"

function ensure_java_version() {
	# Java 1.5 -> 15
	# Java 1.8 -> 18
	# Java 11 -> 110
	# Java 17 -> 117
	required_version_10="${1:-$JAVA_VER_MIN}"

	if [ "$JAVA_VER" -ge "$required_version_10" ]
	then
		echo "INFO Java version is sufficiently new!"
	else
		>&2 echo "ERROR Java version ($JAVA_VER) is too old, needs to be at least $required_version_10!"
		exit 1
	fi
}

function ensure_tool() {
	home="$1"
	url="$2"
	name="$3"

	echo
	printf 'Checking %s is available ... ' "$name"
	if [ -d "$home" ]
	then
		echo "yes!"
	else
		echo "no,"
		echo "installing it under $home ..."
		mkdir -p "$home"
		rm -Rf "${home:?}"
		archive_name="$(basename "$url")"
		dir_name="${archive_name%.zip}"
		wget "$url"
		unzip "$archive_name"
		mv "$dir_name" "$home"
		rm "$archive_name"
		echo "done."
	fi
}
